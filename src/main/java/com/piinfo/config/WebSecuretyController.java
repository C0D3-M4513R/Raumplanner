package com.piinfo.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import javax.sql.DataSource;@Configuration@EnableWebSecuritypublic class WebSecuretyController extends WebSecurityConfigurerAdapter {		@Autowired	private BCryptPasswordEncoder bCryptPasswordEncoder;		@Autowired	private DataSource dataSource;			@Override	protected void configure (AuthenticationManagerBuilder auth)			throws Exception {		auth.jdbcAuthentication()				.usersByUsernameQuery("Select username,password,active from User where username=?")				.authoritiesByUsernameQuery("SELECT username, role FROM USER U INNER JOIN USERROLES UR ON U.id = user_id INNER JOIN ROLES R ON UR.role_id=R.id WHERE U.username=?;")				.dataSource(dataSource)				.passwordEncoder(bCryptPasswordEncoder);	}		@Override	public void configure (WebSecurity web) throws Exception {		web				.ignoring()				.antMatchers("/resources/**", "/static/**", "/css/**", "/js/**", "/images/**", "webjars/**", "general.css");	}		@Override	protected void configure (HttpSecurity http) throws Exception {		http				.authorizeRequests()				.antMatchers("/error").denyAll()				.antMatchers("/login", "/h2-console/**", "/webjars/**", "/general.css").permitAll()				.anyRequest().fullyAuthenticated()				.and()				.formLogin()				.defaultSuccessUrl("/user")				.and()				.csrf()				.ignoringAntMatchers("/h2-console/**")				.and()				.headers()				.frameOptions().sameOrigin()		;	}		}